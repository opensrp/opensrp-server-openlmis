# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  run-unit-tests:

    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
      with:
       submodules: recursive
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Setup Postgres
      uses: harmon758/postgresql-action@v1
      with:
        postgresql version:  '10'  # See https://hub.docker.com/_/postgres for available versions
        postgresql db:       'openlmis_test'
        postgresql user:     'openlmis_admin'
        postgresql password: 'admin'

    - name: Configure Postgres repository
      run: docker exec -u 0 `docker ps -q --filter ancestor=postgres:10` bash -c  "echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list"

    - name: Install PostGIS packages
      run: docker exec -u 0 `docker ps -q --filter ancestor=postgres:10` bash -c  "apt-get -y update && apt-get -y install postgresql-client-10 postgresql-10-postgis-2.4 postgresql-10-postgis-2.4-scripts"
 
    - name: Install Postgres client
      run: sudo apt-get -y update &&  sudo apt-get -y install postgresql-client-10

    - name: Show running services
      run: sudo netstat -tuplen # listing all the port for debug purpose.
      
    - name: Configure migrations
      run: chmod +x assets/migrations/run_mybatis_migrations.sh && sudo ./assets/migrations/run_mybatis_migrations.sh
      
    - name: Create multimedia dir
      run: sudo mkdir -p /opt/multimedia/patient_images && id

    - name: Grant read and write permissions to multimedia directory
      run: sudo chmod a+rwx /opt/multimedia/patient_images
           
    - name: Run Unit tests with Maven
      run: mvn -B clean test jacoco:report --file pom.xml --no-transfer-progress
 
    - name: Set Branch name Environment variable 
      env:
        BRANCH_NAME_OR_REF: ${{ github.head_ref || github.ref }}
      run: echo "BRANCH_NAME=${BRANCH_NAME_OR_REF#refs/heads/}" >> $GITHUB_ENV
 
    - name: Set PR Number Environment variable 
      run: |
        echo "PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")" >> $GITHUB_ENV

    - name: Upload coveralls report
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
         mvn -B coveralls:report --file pom.xml \
          --no-transfer-progress \
          -D repoToken="$COVERALLS_REPO_TOKEN" \
          -D serviceName=Github \
          -D branch="$BRANCH_NAME" \
          -D pullRequest="$PR_NUMBER" \
